foo = "x"

func foo() {
    print "foo"
    return "foo" 
}

x = (foo)
x = (cat "bar" x)
print x

foo = "x"

func many(word n) {
    repeat n {
        print word
    }
}

x = (many "bar" 3)
x = (many "abcd" (/ 16 4 2))

func last(seq) {
    return (get seq (+ (len seq) -1))
}

print (last "abcd")
print (last [1 2 3 4])
print (cat "last=" (str (last [1 2 3 4])))

func square(p) {
    q = (* p p)
    return q
}
p = 3
q = 4

print (square 9)
print p
print q
print (+ (square 1) (square 2) (square 3))

func test(n1 n2) {
    if (== n1 n2) {
        return n1
    } else {
        if (> n1 n2) {
            return (+ n1 (* n2 -1))
        }
        else { } 
    }
}

print (test 5 5)
print (test 10 8)
print (test 10 18)

func stamp(word times) {
    final = "" 
    repeat times {
        final = (cat final word)
    }
    return final
}

print (stamp (cat "foo" "d") (+ 2 1))

func sumRange(low high) {
    if (> low high) {
        return (sumRange high low)
    }
    else {
        if (== low high) {
            return low
        }
        else {
            return (+ low (sumRange (+ low 1) high))
        }
    }
}

print (sumRange 1 10)
print (+ (sumRange 1 5) (sumRange 6 10))
print (sumRange 10 1)

func nestedReturn(level) {
    if (== level 0) {
        return 0
    } else {
        if (== level 1) {
            repeat 2 {
                return 1
                print 999
            }
        } else {
            return level
        }
    }
    return 999
}

print (nestedReturn 0)
print (nestedReturn 1)
print (nestedReturn 2)

sum = 10

func nestedRepeats(n) {
  sum = 0
  
  repeat n {
    i = 0
    repeat n {
      i = (+ i 1)
      sum = (+ sum 1)
    }
    print i
  }
  
  print sum
  return sum
}

print sum

print (nestedRepeats 3)

func testNestedScoping() {
  count = 0
  repeat 3 {
    i = 0
    while (< i 3) {
      if (== i 1) {
        count = (+ count 1)
        print count
      } else { }
      i = (+ i 1)
    }
    print count
  }
  
  print count
  return count
}

print (testNestedScoping)

func basicTest() {
    count = 0
    repeat 5 {
      count = (+ count 1)
      if (== count 3) {
        return count
      } else { }
    }
    return 999  
  }

func nestedTest() {
    count = 0
    repeat 3 {
      repeat 3 {
        count = (+ count 1)
        if (== count 5) {
          return count
        } else { }
      }
    }
    return 999 
  }
func conditionalTest(n) {
    result = 0
    repeat 10 {
      result = (+ result 1)
      if (== result n) {
        return (cat "Found " (str result))
      } else { }
    }
    return "Not found"
  }

func nestedTest() {
    outer = 0
    inner = 0
    while (< outer 3) {
      outer = (+ outer 1)
      inner = 0
      while (< inner 3) {
        inner = (+ inner 1)
        if (and (== outer 2) (== inner 2)) {
          return (* outer inner)
        } else { }
      }
    }
    return 999  
  }