func foo() {
    print "foo"
}

x = (foo)
print x

func many(word n) {
    repeat n {
        print word
    }
}

x = (many "bar" 3)
x = (many "abcd" (/ 16 4 2))

func last(seq) {
    return (get seq (+ (len seq) -1))
}

print (last "abcd")
print (last [1 2 3 4])
print (cat "last=" (str (last [1 2 3 4])))

func square(p) {
    q = (* p p)
    return q
}
p = 3
q = 4

print (square 9)
print p
print q
print (+ (square 1) (square 2) (square 3))

func test(n1 n2) {
    if (== n1 n2) {
        return n1
    } else {
        if (> n1 n2) {
            return (+ n1 (* n2 -1))
        }
        else { } 
    }
}

print (test 5 5)
print (test 10 8)
print (test 10 18)

func stamp(word times) {
    final = "" 
    repeat times {
        final = (cat final word)
    }
    return final
}

print (stamp (cat "foo" "d") (+ 2 1))

func sumRange(low high) {
    if (> low high) {
        return (sumRange high low)
    }
    else {
        if (== low high) {
            return low
        }
        else {
            return (+ low (sumRange (+ low 1) high))
        }
    }
}

print (sumRange 1 10)
print (+ (sumRange 1 5) (sumRange 6 10))
print (sumRange 10 1)

func nestedReturn(level) {
    if (== level 0) {
        return 0
    } else {
        if (== level 1) {
            repeat 2 {
                return 1
            }
        } else {
            return level
        }
    }
    return 999
}

print (nestedReturn 0)
print (nestedReturn 1)
print (nestedReturn 3)

func factorial(n) {
    if (<= n 1) {
        return 1
    } else {
        return (* n (factorial (+ n -1)))
    }
}

print (factorial 0)
print (factorial 1) 
print (factorial 10)

func fibonacci(n) {
    if (<= n 1) {
        return n
    } else {
        return (+ (fibonacci (+ n -1)) (fibonacci (+ n -2)))
    }
}

print (fibonacci 7)
print (fibonacci 0)
print (fibonacci 1)
print (fibonacci 2)
print (fibonacci 10)

func negRecursion(n) {
    if (< n 0) {
        return (+ n -1)
    } else {
        if (== n 0) {
            return 0
        } else {
            return (negRecursion (+ n -1))
        }
    }
}

print (negRecursion 5)
print (negRecursion 0)
print (negRecursion -3)

func ackermann(m n) {
    if (== m 0) {
        return (+ n 1)
    } else {
        if (== n 0) {
            return (ackermann (+ m -1) 1)
        } else {
            return (ackermann (+ m -1) (ackermann m (+ n -1)))
        }
    }
}

print (ackermann 0 0)
print (ackermann 1 1)
print (ackermann 2 2)
print (ackermann 3 2)

func multiReturn(n option) {
    if (== option 1) {
        return n
    } else {
        if (== option 2) {
            if (< n 1) {
                return 0
            } else {
                return (+ n (multiReturn (+ n -1) option))
            }
        } else {
            if (== option 3) {
                if (< n 1) {
                    return 1
                } else {
                    return (* n (multiReturn (+ n -1) option))
                }
            } else {
                return 0
            }
        }
    }
}

print (multiReturn 5 1)
print (multiReturn 5 2)
print (multiReturn 5 3)
print (multiReturn 5 4)

func simpleLoop() {
    i = 0
    while (< i 10) {
        i = (+ i 1)
        print i
        if (== i 5) {
            return i
        } else { }
    }
    return 999
}

print (simpleLoop)

func isEven(n) {
    if (== n 0) {
        return true
    } else {
        if (== n 1) {
            return false
        } else {
            return (isOdd (+ n -1))
        }
    }
}

func isOdd(n) {
    if (== n 0) {
        return false
    } else {
        if (== n 1) {
            return true
        } else {
            return (isEven (+ n -1))
        }
    }
}

print (isEven 4)
print (isOdd 7)

x = 100
y = 200
func testScope(x) {
    y = 50
    z = 500
    return (+ x y z)
}

print (testScope 42)
print x
print y

func nestedReturnTest(max) {
    count = 0
    
    while (< count max) {
        count = (+ count 1)
        print count
        
        if (== count 3) {
            print 3
            return 42
        } else { }
    }
    
    print 999
    return 999
}

print 0
result = (nestedReturnTest 5)
print result

func deeperNesting(n) {
    i = 0
    while (< i 10) {
        i = (+ i 1)
        print i
        
        if (> i 2) {
            j = 0
            while (< j 3) {
                j = (+ j 1)
                print j
                
                if (== j 2) {
                    print j
                    return (+ i j)
                } else { }
            }
        } else { }
    }
    return 0
}

print 0
result = (deeperNesting 0)
print result

func add(a b) {
    return (+ a b)
}

func multiply(a b) {
    return (* a b)
}

func calculate(a b c) {
    return (+ (multiply a b) (add b c))
}

print (calculate 3 4 5)

func countDown(start) {
    count = start
    result = []
    
    while (> count 0) {
        result = (cat result [count])
        count = (+ count -1)
    }
    
    return result
}

print (countDown 5)

func isEvenComplex(n) {
    if (< n 0) {
        return (isEvenComplex (* n -1))
    } else {
        if (== n 0) {
            return true
        } else {
            return (isOddComplex (+ n -1))
        }
    }
}

func isOddComplex(n) {
    if (< n 0) {
        return (isOddComplex (* n -1))
    } else {
        if (== n 0) {
            return false
        } else {
            return (isEvenComplex (+ n -1))
        }
    }
}

print (isEvenComplex 10)
print (isEvenComplex -7)
print (isOddComplex 15)
print (isOddComplex -22)

func nestedRepeats(n) {
  sum = 0
  
  repeat n {
    i = 0
    repeat n {
      i = (+ i 1)
      sum = (+ sum 1)
    }
    print i
  }
  
  print sum
  return sum
}

print (nestedRepeats 3)

func singleParamFind(params) {
    target = (get params 0)
    arr = (get params 1)
    index = 0
    
    while (< index (len arr)) {
        if (== (get arr index) target) {
            return index
        } else { }
        
        index = (+ index 1)
    }
    
    return -1
}

print (singleParamFind [3 [1 2 3 4 5]])
print (singleParamFind [10 [1 2 3 4 5]])

func minimalTest(x y) {
    return (+ x y)
}

print (minimalTest 5 10)

func simpleFindValue(t arr) {
    index = 0
    
    while (< index (len arr)) {
        current = (get arr index)
        
        if (== current t) {
            return index
        } else { }
        
        index = (+ index 1)
    }
    
    return -1
}

print (simpleFindValue 3 [1 2 3 4 5])
print (simpleFindValue 10 [1 2 3 4 5])

func double(x) {
    return (* x 2)
}

print (mapItems double [1 2 3 4 5])

func testScopes() {
    x = 10
    
    func innerFunc() {
        x = 20
        y = 30
        return (+ x y)
    }
    
    result = (innerFunc)
    return [result x]
}

print (testScopes)

func level3() {
    return 3
}

func level2() {
    return (level3)
}

func level1() {
    return (level2)
}

print (level1)

func divisionTests() {
    result = []
    
    result = (cat result [(/ -10 2)])
    
    result = (cat result [(/ 5 2)])
    
    return result
}

print (divisionTests)

func isVowel(char) {
    vowels = "aeiouAEIOU"
    i = 0
    while (< i (len vowels)) {
        if (== char (get vowels i)) {
            return true
        } else { }
        i = (+ i 1)
    }
    return false
}

print (isVowel 'a')
print (isVowel 'b')
print (isVowel 'E')

func booleanTests() {
    result = []
    
    result = (cat result [(and true false true)])
    
    result = (cat result [(or false false true false)])
    
    result = (cat result [(and (or true false) (not false))])
    
    return result
}

print (booleanTests)

print (factorial 15)

func makeAdder(n) {
    func adder(x) {
        return (+ x n)
    }
    
    return adder
}

add5 = (makeAdder 5)
print (add5 10)

func mapItems(f arr) {
    if (== (len arr) 0) {
        return []
    } else {
        first = (get arr 0)
        rest = []
        
        i = 1
        while (< i (len arr)) {
            rest = (cat rest [(get arr i)])
            i = (+ i 1)
        }
        
        return (cat [(f first)] (mapItems f rest))
    }
}