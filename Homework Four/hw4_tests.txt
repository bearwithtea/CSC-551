func fibonacci(n) {
    if (<= n 1) {
        return n
    } else {
        return (+ (fibonacci (+ n -1)) (fibonacci (+ n -2)))
    }
}

print (fibonacci 7)

func isEven(n) {
    if (== n 0) {
        return true
    } else {
        if (== n 1) {
            return false
        } else {
            return (isOdd (+ n -1))
        }
    }
}

func isOdd(n) {
    if (== n 0) {
        return false
    } else {
        if (== n 1) {
            return true
        } else {
            return (isEven (+ n -1))
        }
    }
}

print (isEven 4)
print (isOdd 7)

x = 100
y = 200
func testScope(x) {
    y = 50
    z = 500
    return (+ x y z)
}

print (testScope 42)
print x
print y

func simpleLoop() {
    i = 0
    while (< i 10) {
        i = (+ i 1)
        print i
        if (== i 5) {
            return i
        } else { }
    }
    return 999
}

func factorial(n) {
    if (<= n 1) {
        return 1
    } else {
        return (* n (factorial (+ n -1)))
    }
}

print (factorial 5)

func sumRange(low high) {
    if (> low high) {
        return (sumRange high low)
    } else {
        if (== low high) {
            return low
        } else {
            return (+ low (sumRange (+ low 1) high))
        }
    }
}

print (sumRange 1 10)
print (sumRange 10 1)

func nestedReturn(level) {
    if (== level 0) {
        return 0
    } else {
        if (== level 1) {
            repeat 2 {
                return 1
            }
        } else {
            return level
        }
    }
    return 999
}

print (nestedReturn 0)
print (nestedReturn 1)
print (nestedReturn 3)

func factorial(n) {
    if (<= n 1) {
        return 1
    } else {
        return (* n (factorial (+ n -1)))
    }
}

print (factorial 0)
print (factorial 1) 
print (factorial 10)

func fibonacci(n) {
    if (<= n 1) {
        return n
    } else {
        return (+ (fibonacci (+ n -1)) (fibonacci (+ n -2)))
    }
}

print (fibonacci 0)
print (fibonacci 1)
print (fibonacci 2)
print (fibonacci 10)

func negRecursion(n) {
    if (< n 0) {
        return (+ n -1)
    } else {
        if (== n 0) {
            return 0
        } else {
            return (negRecursion (+ n -1))
        }
    }
}

print (negRecursion 5)
print (negRecursion 0)
print (negRecursion -3)

func ackermann(m n) {
    if (== m 0) {
        return (+ n 1)
    } else {
        if (== n 0) {
            return (ackermann (+ m -1) 1)
        } else {
            return (ackermann (+ m -1) (ackermann m (+ n -1)))
        }
    }
}

print (ackermann 0 0)
print (ackermann 1 1)
print (ackermann 2 2)
print (ackermann 3 2)

func recursiveIf(n) {
    if (< n 10) {
        if (< n 5) {
            if (< n 2) {
                return 100
            } else {
                return (recursiveIf (+ n -1))
            }
        } else {
            return (recursiveIf (+ n -2))
        }
    } else {
        return 0
    }
}

print (recursiveIf 8)
print (recursiveIf 1)
print (recursiveIf 10)

func multiReturn(n option) {
    if (== option 1) {
        return n
    } else {
        if (== option 2) {
            if (< n 1) {
                return 0
            } else {
                return (+ n (multiReturn (+ n -1) option))
            }
        } else {
            if (== option 3) {
                if (< n 1) {
                    return 1
                } else {
                    return (* n (multiReturn (+ n -1) option))
                }
            } else {
                return 0
            }
        }
    }
}

print (multiReturn 5 1)
print (multiReturn 5 2)
print (multiReturn 5 3)
print (multiReturn 5 4)